<a id='edit_link' href="{{url_for('show_template', user=__user, site=__site, template=__template)}}">done editing</a>
<script src="{{ url_for('static', filename='__/js/jquery-1.8.2.min.js') }}"></script>
<script src="{{ url_for('static', filename='__/js/redactor.js') }}"></script>
<link rel="stylesheet" href="{{ url_for('static', filename='__/js/redactor.css') }}" />
<link rel="stylesheet" href="{{ url_for('static', filename='__/css/global.css') }}" />
<div id="cnoms-edit">
<div id="cnoms-toolbar"></div>
</div>

<script type="text/javascript">


!function ($) {



  $.fn.cnoms_collection = function (option) {
    return this.each(function () {
        var $template = $($(this).find("[data-type=item]").first())

        var tools = $("<div>", {'class': "tools"});
        var new_btn = $("<button>", {class: "new_btn", text:"Add..."}).bind('click', function() {
            var $clone = $template.clone(true)
            $clone.insertBefore(this);
            var old_name = $template.data('fieldname');
            var new_name = $clone.data('parent') + "_" + Math.floor(Math.random()*255).toString(16) + Math.floor(Math.random()*255).toString(16) + Math.floor(Math.random()*255).toString(16);
            $clone.attr("data-fieldname", new_name)
            $clone.find(".tools").remove();
            $clone.find("[data-parent]").each(function() {
                if ($(this).data('parent') == old_name) {
                    $(this).text("New "+$(this).data('fieldname'))
                    $(this).attr('data-parent', new_name);
                }
            });
            $.post('/{{ __user }}/{{ __site }}/change_entry', {
                'fieldname': $clone.data('fieldname'),
                'parent': $clone.data('parent'),
                'type': "item"
            });
            $clone.find("*[data-fieldname]:not([data-type=collection], [data-type=item])").cnoms();
        }).appendTo(this)
    });
  }
  var elements = [];

  var methods = {
    init: function(options) {
        return this.each(function(){
            var $this = $(this), data = $this.data('cnoms');
            if (!data) {
                $this.data('cnoms', {
                    "changed": false,
                });
                data = $this.data('cnoms');
            }
            elements.push($this);
            $this.redactor({
                toolbarExternal: '#cnoms-toolbar',
                execCommandCallback: function() { 
                    $('body').addClass('changed');
                    data.changed = true;
                },
                keyupCallback: function() { 
                    $('body').addClass('changed');
                    data.changed = true;
                },
                buttonsAdd: ['|', 'save'],
                buttonsCustom: {
                    save: {
                        title: 'Save', 
                        callback: function(obj, event, key) {
                            $(elements).cnoms('save');
                            $('body').removeClass('changed')
                        }
                    }
                }
            });
            $this.changed = false;
        });
    },
    update: function(content) {
        return this.each(function(){
            var $this = $(this), data = $this.data('cnoms');  
            $this.setCode(content)
            data.changed = true;
            $('body').addClass('changed')
        });
    },
    save: function() {
        return this.each(function(){
            var $this = $(this), data = $this.data('cnoms');    
            $this.name = $this.data('fieldname');
            if (data.changed) {
                $.post('/{{ __user }}/{{ __site }}/change_entry', {
                    'fieldname': $this.data('fieldname'),
                    'parent': $this.attr('data-parent'),
                    'type': $this.data('type'),
                    'value': $this.getCode()
                }, function() {
                    console.log($this.name, "saved");
                    $this.data('changed', false)
                });
            } else {
                console.log($this.name, "nothing to save");
            }
        });
    }
  }

  $.fn.cnoms = function (method) {
    // Method calling logic
    if ( methods[method] ) {
        return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
    } else if ( typeof method === 'object' || ! method ) {
        return methods.init.apply( this, arguments );
    } else {
        $.error( 'Method ' +  method + ' does not exist on jQuery.tooltip' );
    }  
  }
}(window.jQuery);

$(document).ready(function(){
    $("*[data-fieldname]:not([data-type=collection], [data-type=item])").cnoms();
    $("*[data-type=collection]").cnoms_collection();
    $("body").addClass("cnoms-edit")
    $.getJSON("http://localhost:5000/data/{{ __user }}/{{ __site }}", function (result) {
            var slider = $("<input>", {type: "range", min: 1, max: result.length, step:1, value: result.length}).bind('change', function() {
                for (var now = result.length -1; now>=result.length - this.value; now--) {
                    state = result[now]
                    for (var field in state) {
                        $("[data-fieldname="+field+"]:not([data-parent], [data-type=item], [data-type=collection])").cnoms('update', state[field]);
                    }
                }
            })
            $("#cnoms-edit").append(slider);
        
        });
});

</script>